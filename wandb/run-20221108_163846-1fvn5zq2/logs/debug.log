2022-11-08 16:38:46,460 INFO    MainThread:87160 [wandb_setup.py:_flush():68] Configure stats pid to 87160
2022-11-08 16:38:46,460 INFO    MainThread:87160 [wandb_setup.py:_flush():68] Loading settings from /Users/nishadevadiga/.config/wandb/settings
2022-11-08 16:38:46,460 INFO    MainThread:87160 [wandb_setup.py:_flush():68] Loading settings from /Users/nishadevadiga/Downloads/Stock-Trading-Environment-master/wandb/settings
2022-11-08 16:38:46,460 INFO    MainThread:87160 [wandb_setup.py:_flush():68] Loading settings from environment variables: {'_require_service': 'True'}
2022-11-08 16:38:46,460 INFO    MainThread:87160 [wandb_setup.py:_flush():68] Inferring run settings from compute environment: {'program_relpath': 'main.py', 'program': '/Users/nishadevadiga/Downloads/Stock-Trading-Environment-master/main.py'}
2022-11-08 16:38:46,460 INFO    MainThread:87160 [wandb_init.py:_log_setup():476] Logging user logs to /Users/nishadevadiga/Downloads/Stock-Trading-Environment-master/wandb/run-20221108_163846-1fvn5zq2/logs/debug.log
2022-11-08 16:38:46,460 INFO    MainThread:87160 [wandb_init.py:_log_setup():477] Logging internal logs to /Users/nishadevadiga/Downloads/Stock-Trading-Environment-master/wandb/run-20221108_163846-1fvn5zq2/logs/debug-internal.log
2022-11-08 16:38:46,460 INFO    MainThread:87160 [wandb_init.py:init():516] calling init triggers
2022-11-08 16:38:46,460 INFO    MainThread:87160 [wandb_init.py:init():519] wandb.init called with sweep_config: {}
config: {'policy_type': 'MlpPolicy', 'total_timesteps': 200000, 'env_name': 'StockTradingEnv'}
2022-11-08 16:38:46,461 INFO    MainThread:87160 [wandb_init.py:init():569] starting backend
2022-11-08 16:38:46,461 INFO    MainThread:87160 [wandb_init.py:init():573] setting up manager
2022-11-08 16:38:46,462 INFO    MainThread:87160 [backend.py:_multiprocessing_setup():102] multiprocessing start_methods=spawn,fork,forkserver, using: spawn
2022-11-08 16:38:46,463 INFO    MainThread:87160 [wandb_init.py:init():580] backend started and connected
2022-11-08 16:38:46,465 INFO    MainThread:87160 [wandb_init.py:init():658] updated telemetry
2022-11-08 16:38:46,476 INFO    MainThread:87160 [wandb_init.py:init():693] communicating run to backend with 60 second timeout
2022-11-08 16:38:46,753 INFO    MainThread:87160 [wandb_run.py:_on_init():2000] communicating current version
2022-11-08 16:38:46,854 INFO    MainThread:87160 [wandb_run.py:_on_init():2004] got version response 
2022-11-08 16:38:46,854 INFO    MainThread:87160 [wandb_init.py:init():728] starting run threads in backend
2022-11-08 16:38:48,580 INFO    MainThread:87160 [wandb_run.py:_console_start():1980] atexit reg
2022-11-08 16:38:48,580 INFO    MainThread:87160 [wandb_run.py:_redirect():1838] redirect: SettingsConsole.WRAP_RAW
2022-11-08 16:38:48,580 INFO    MainThread:87160 [wandb_run.py:_redirect():1903] Wrapping output streams.
2022-11-08 16:38:48,580 INFO    MainThread:87160 [wandb_run.py:_redirect():1925] Redirects installed.
2022-11-08 16:38:48,581 INFO    MainThread:87160 [wandb_init.py:init():765] run started, returning control to user process
2022-11-08 16:38:48,605 INFO    MainThread:87160 [wandb_run.py:_config_callback():1160] config_cb None None {'algo': 'SAC', 'policy_class': "<class 'stable_baselines3.sac.policies.SACPolicy'>", 'device': 'cpu', 'env': '<stable_baselines3.common.vec_env.dummy_vec_env.DummyVecEnv object at 0x13f0dc2e0>', '_vec_normalize_env': 'None', 'verbose': 1, 'policy_kwargs': "{'use_sde': False}", 'observation_space': 'Box([[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n  0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n  0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n  0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n  0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n  0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]], [[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n  1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n  1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n  1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n  1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n  1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]], (5, 42), float16)', 'action_space': 'Box([0. 0.], [3. 1.], (2,), float16)', 'n_envs': 1, 'num_timesteps': 0, '_total_timesteps': 200000, '_num_timesteps_at_start': 0, 'eval_env': 'None', 'seed': 'None', 'action_noise': 'None', 'start_time': 1667954328595987000, 'policy': 'SACPolicy(\n  (actor): Actor(\n    (features_extractor): FlattenExtractor(\n      (flatten): Flatten(start_dim=1, end_dim=-1)\n    )\n    (latent_pi): Sequential(\n      (0): Linear(in_features=210, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Linear(in_features=256, out_features=256, bias=True)\n      (3): ReLU()\n    )\n    (mu): Linear(in_features=256, out_features=2, bias=True)\n    (log_std): Linear(in_features=256, out_features=2, bias=True)\n  )\n  (critic): ContinuousCritic(\n    (features_extractor): FlattenExtractor(\n      (flatten): Flatten(start_dim=1, end_dim=-1)\n    )\n    (qf0): Sequential(\n      (0): Linear(in_features=212, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Linear(in_features=256, out_features=256, bias=True)\n      (3): ReLU()\n      (4): Linear(in_features=256, out_features=1, bias=True)\n    )\n    (qf1): Sequential(\n      (0): Linear(in_features=212, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Linear(in_features=256, out_features=256, bias=True)\n      (3): ReLU()\n      (4): Linear(in_features=256, out_features=1, bias=True)\n    )\n  )\n  (critic_target): ContinuousCritic(\n    (features_extractor): FlattenExtractor(\n      (flatten): Flatten(start_dim=1, end_dim=-1)\n    )\n    (qf0): Sequential(\n      (0): Linear(in_features=212, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Linear(in_features=256, out_features=256, bias=True)\n      (3): ReLU()\n      (4): Linear(in_features=256, out_features=1, bias=True)\n    )\n    (qf1): Sequential(\n      (0): Linear(in_features=212, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Linear(in_features=256, out_features=256, bias=True)\n      (3): ReLU()\n      (4): Linear(in_features=256, out_features=1, bias=True)\n    )\n  )\n)', 'learning_rate': 0.0003, 'tensorboard_log': 'None', 'lr_schedule': '<function constant_fn.<locals>.func at 0x13efd3b50>', '_last_obs': '[[[0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00\n   0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00\n   0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00\n   0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00\n   0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00\n   0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 4.65e-06]\n  [0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00\n   0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00\n   0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00\n   0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00\n   0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00\n   0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 4.65e-06]\n  [0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00\n   0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00\n   0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00\n   0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00\n   0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00\n   0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00]\n  [0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00\n   0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00\n   0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00\n   0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00\n   0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00\n   0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00]\n  [0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00\n   0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00\n   0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00\n   0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00\n   0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00\n   0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00 0.00e+00]]]', '_last_episode_starts': '[ True]', '_last_original_obs': 'None', '_episode_num': 0, 'use_sde': 'False', 'sde_sample_freq': -1, '_current_progress_remaining': 1, 'ep_info_buffer': 'deque([], maxlen=100)', 'ep_success_buffer': 'deque([], maxlen=100)', '_n_updates': 0, '_logger': '<stable_baselines3.common.logger.Logger object at 0x13efce620>', '_custom_logger': 'False', 'buffer_size': 1000000, 'batch_size': 256, 'learning_starts': 100, 'tau': 0.005, 'gamma': 0.99, 'gradient_steps': 1, 'optimize_memory_usage': 'False', 'replay_buffer_class': "<class 'stable_baselines3.common.buffers.ReplayBuffer'>", 'replay_buffer_kwargs': '{}', '_episode_storage': 'None', 'train_freq': "TrainFreq(frequency=1, unit=<TrainFrequencyUnit.STEP: 'step'>)", 'actor': 'Actor(\n  (features_extractor): FlattenExtractor(\n    (flatten): Flatten(start_dim=1, end_dim=-1)\n  )\n  (latent_pi): Sequential(\n    (0): Linear(in_features=210, out_features=256, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=256, out_features=256, bias=True)\n    (3): ReLU()\n  )\n  (mu): Linear(in_features=256, out_features=2, bias=True)\n  (log_std): Linear(in_features=256, out_features=2, bias=True)\n)', 'replay_buffer': '<stable_baselines3.common.buffers.ReplayBuffer object at 0x164ab3100>', 'use_sde_at_warmup': 'False', 'target_entropy': '-2.0', 'log_ent_coef': 'tensor([0.], requires_grad=True)', 'ent_coef': 'auto', 'target_update_interval': 1, 'ent_coef_optimizer': 'Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: False\n    lr: 0.0003\n    maximize: False\n    weight_decay: 0\n)', 'critic': 'ContinuousCritic(\n  (features_extractor): FlattenExtractor(\n    (flatten): Flatten(start_dim=1, end_dim=-1)\n  )\n  (qf0): Sequential(\n    (0): Linear(in_features=212, out_features=256, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=256, out_features=256, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=256, out_features=1, bias=True)\n  )\n  (qf1): Sequential(\n    (0): Linear(in_features=212, out_features=256, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=256, out_features=256, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=256, out_features=1, bias=True)\n  )\n)', 'critic_target': 'ContinuousCritic(\n  (features_extractor): FlattenExtractor(\n    (flatten): Flatten(start_dim=1, end_dim=-1)\n  )\n  (qf0): Sequential(\n    (0): Linear(in_features=212, out_features=256, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=256, out_features=256, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=256, out_features=1, bias=True)\n  )\n  (qf1): Sequential(\n    (0): Linear(in_features=212, out_features=256, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=256, out_features=256, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=256, out_features=1, bias=True)\n  )\n)', 'batch_norm_stats': '[]', 'batch_norm_stats_target': '[]'}
2022-11-08 16:41:20,023 INFO    MainThread:87160 [sb3.py:save_model():149] Saving model checkpoint to models/SAC/1fvn5zq2/model.zip
2022-11-08 16:41:21,957 INFO    MainThread:87160 [wandb_run.py:_finish():1746] finishing run nishamdev/StockTrading/1fvn5zq2
2022-11-08 16:41:21,957 INFO    MainThread:87160 [wandb_run.py:_atexit_cleanup():1949] got exitcode: 0
2022-11-08 16:41:21,957 INFO    MainThread:87160 [wandb_run.py:_restore():1932] restore
2022-11-08 16:41:21,957 INFO    MainThread:87160 [wandb_run.py:_restore():1938] restore done
2022-11-08 16:41:25,775 INFO    MainThread:87160 [wandb_run.py:_footer_history_summary_info():3377] rendering history
2022-11-08 16:41:25,775 INFO    MainThread:87160 [wandb_run.py:_footer_history_summary_info():3409] rendering summary
2022-11-08 16:41:25,780 INFO    MainThread:87160 [wandb_run.py:_footer_sync_info():3333] logging synced files
